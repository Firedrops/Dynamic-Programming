# A function that checks whether or not a specific output string
# can be generated by exact combining a set of input strings
# Inputs can be "re-used" indefinitely.

# Examples
# canConstruct(abcdef, [ab, abc, cd, def, abcd]) should output True
# canConstruct(skateboard, [bo, rd, ate, t, ska, sk, boar]) should output False
# canConstruct('', [literally anything]) should always output True

# Naive/brute-force implementation:
# O(n^m) time
# O(m) space

# def canConstructNaive(targetString: object, subStrings):
#     if targetString == "":
#         return True
#
#     for string in subStrings:
#         if targetString.startswith(string):
#             suffix = targetString[slice(len(string), len(targetString))]
#             if canConstructNaive(suffix, subStrings) is True:
#                 return True
#
#     return False
#
#
# if __name__ == '__main__':
#     print(canConstructNaive("skateboard", ["bo", "rd", "ate", "t", "ska", "sk", "boar"]))  # Should be False
#     print(canConstructNaive("", ["literally", "anything"]))  # Should be True
#     print(canConstructNaive("enterapotentpot", ["a", "p", "ent", "enter", "ot", "o", "t"]))
# #    canConstructNaive("eeeeeeeeeeeeeeeeeeeeeeeeeeef", ["eee", "e", "ee", "eeeeeeee", "eeeeee", "eeeee", "eeeeeeeeee"]) # Stress False


# Memoized
# O(n * m^2) time
# O(m) space

def canConstructMemo(targetString, subStrings, memo={}):
    if targetString in memo:
        return memo[targetString]
    if targetString == "":
        return True

    for string in subStrings:
        if targetString.startswith(string):
            suffix = targetString[slice(len(string), len(targetString))]
            if canConstructMemo(suffix, subStrings, memo) is True:
                memo[targetString] = True
                return True

    memo[targetString] = False
    return False

    memo[targetSum] = None
    return None


if __name__ == '__main__':
    print(canConstructMemo("skateboard", ["bo", "rd", "ate", "t", "ska", "sk", "boar"]))  # Should be False
    print(canConstructMemo("", ["literally", "anything"]))  # Should be True
    print(canConstructMemo("enterapotentpot", ["a", "p", "ent", "enter", "ot", "o", "t"]))
    print(canConstructMemo("eeeeeeeeeeeeeeeeeeeeeeeeeeef", ["eee", "e", "ee", "eeeeeeee", "eeeeee", "eeeee", "eeeeeeeeee"])) # Stress False

